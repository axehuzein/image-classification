# -*- coding: utf-8 -*-
"""DicodingSubmission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11zNKhd1_7pfKrZdH0p9zB8JafjjBlSaa
"""

#Nama = Akbar Diaz Dewangga
#email = akbardiaz2@gmail.com
#Ttl = Jakarta, 2 maret 2001
#Tempat tinggal = Kab.bogor, Kec.bojongkulur , VNI 3

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

!wget --no-check-certificate \
https://github.com/dicodingacademy/assets/releases/download/release-horse-or-human/horse-or-human.zip \
  -O /tmp/horse-or-human.zip

import zipfile, os

local_zip = '/tmp/horse-or-human.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/rockpaperscissors/rps-cv-images'

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'wrap',
                    validation_split=0.4)

!pip install split-folders

train_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size = (150, 150),
    shuffle=True,
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size=(150,150),
    subset='validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(28, (3,3), activation='relu', input_shape=(200, 250, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer=tf.optimizers.Adam(), metrics=['accuracy'])

model.fit(
    train_generator,
    steps_per_epoch=32,
    epochs=20,
    validation_data=validation_generator,
    validation_steps=8,
    verbose=2
)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():

  #Predicting images
  path = fn
  img = image.load_img(path, target_size=(200,250))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(fn)
  if classes[0][0]==1:
    print('paper')
  elif classes[0][1]==1:
    print('rock')
  elif classes [0][2]==1:
    print('scissors')
  else:
    print('unknown')